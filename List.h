/ * Задача:
	Найти и удалить в двусвязанном списке наименьший элемент
Автор:
	Абдуллин И.И.
* /

# include  < iostream >
# include  < iomanip >
# include  < stdlib.h >
# include  < locale.h >
# include  < ctime >
использование  пространства имен  std ;

 список структур
{
	int info;
	список * пред, * следующий;
};

// создает пустой список
void  CreatNulList (список * и голова, список * и хвост)
{
	голова = новый список;
	хвост = новый список;

	голова-> следующая = хвост;
	хвост-> пред = голова;
}

// Функция формирует список из N целых элементов со сторожами голова и хвост
void  CreateRandomlist (список * и заголовок , список * и хвост, int n = 10 )
{
	голова = новый список;
	хвост = новый список;

	голова-> следующая = хвост;
	хвост-> пред = голова;
	список * последний = руководитель;
	для ( int i = 0 ; i <n; i ++)
	{
		list * p = новый список;

		p-> pred = last;
		p-> next = last-> next ;
		last-> next = p;
		p-> следующий -> pred = p;

		последний = р;
		p-> info = rand ()% 20 ;

	}
	возврат ;
}

/ *
Функция исключает эл
возвращает указатель на следующий элемент после Р
* /
list * RemoveElement (список * & p)
{
	если (р)
	{
		список * p1 = p-> pred ;
		список * p2 = p-> следующий ;

		p1-> next = p2;
		р2> PRED = р1;
		p-> pred = NULL ;
		p-> next = NULL ;
		возврат р2;
	}
	еще
		вернуть  NULL ;
}

// функция вставляет новый элемент p в список
void  Insert (список * голова, список * хвост, список * p)
{
	если (р)
	{
		р-> следующий = хвост;
		п-> PRED = tail-> PRED ;
		tail-> PRED = р;
		p-> pred -> next = p;
	}
	еще
		cout << " Ошибка! " << endl;
}


// Функуция выводит двусвязанный список на экран
void  PrintList (список * голова, список * хвост)
{
	если (голова и хвост)
	{
		list * p = head-> next ;
		while (p! = tail)
		{
			cout << setw ( 4 ) << p-> info ;
			р = р-> следующий ;
		}
	}
	возврат ;
}

// Функция удаляеь минимальный элемент в списке
void  DeleteMin (список * и голова, список * и хвост)
{
	если (голова и хвост)
	{
		list * p = head-> next ;
		int min = 21 ;
		while (p! = tail)
		{
			if (p-> info <min)
			{
				min = p-> info ;
			}

			р = р-> следующий ;
		}

		list * k = head-> next ;
		в то время как (к! = хвост)
		{
			if (k-> info == min)
			{
				k = RemoveElement (k);
			}
			еще
			{
				k = k-> следующий ;
			}
		}
	}
}


void  main ()
{
	setlocale (LC_ALL, " русский " );  // Устанавливаем русскую кодировку
	список * голова, * хвост;
	сранд ( время ( NULL ));  // Включение генератора случайных чисел

	// Создаем и выводим на экран список L
	CreateRandomlist (голова, хвост);
	cout << " Список: " << endl;
	PrintList (голова, хвост);
	cout << endl;

	// Удаление минимального элемента и вывод списка на экран
	DeleteMin (голова, хвост);
	cout << " Список после удаления минимального элемента: " << endl;
	PrintList (голова, хвост);
	cout << endl;

	система ( « пауза » );
}